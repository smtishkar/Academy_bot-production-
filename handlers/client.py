import pandas
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from create_bot import dp, bot
from keyboards.client_kb import kb_client, registration_kb, kb_cancel, trainings_kb, kb_ask, schedule_kb
from data_base import sqlite_db
from datetime import datetime
from aiogram.dispatcher.filters.state import State, StatesGroup


class FSMClient(StatesGroup):
    saba_id = State()


class FSMQuestion(StatesGroup):
    question = State()
    question_id = State()
    reply = State()


class FSMReset(StatesGroup):
    new_id = State()


class FSMTrainingRequest(StatesGroup):
    request = State()


excel_data_df = pandas.read_excel('lms_id.xlsx', sheet_name='sheet1')
id_saba = excel_data_df['ID'].tolist()

"""*********************************–ë–õ–û–ö –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô***************************************"""


async def client_start(message: types.Message):
    read = await sqlite_db.sql_read_users()
    test_dict = {}
    for ret in read:
        # changed_id = ''
        # if "_" in ret[1]:
        #     changed_id = ret[1].replace('_', "#")
        #     test_dict[ret[0]] = changed_id
        test_dict[ret[0]] = ret[1]
    for key, values in test_dict.items():
        if message.from_user.id == key in test_dict and str(values).upper() in id_saba:
            await bot.send_message(message.from_user.id, '–ü—Ä–æ–≤–µ—Ä–∫–∞ ID –Ω–æ–º–µ—Ä–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
            await bot.send_message(message.from_user.id,
                                   '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–∫–∞–¥–µ–º–∏—éüëã! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º –ø–æ–ª—É—á–∞—Ç—å '
                                   '–∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π '
                                   '–ê–∫–∞–¥–µ–º–∏–∏ –¢–æ–π–æ—Ç–∞ üì∞. –Ø –Ω–∞—Ö–æ–∂—É—Å—å –Ω–∞ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º —ç—Ç–∞–ø–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Å—å '
                                   '—ç–Ω—Ç—É–∑–∏–∞–∑–º–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∞–∫–∞–¥–µ–º–∏–∏. –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –º–æ—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç '
                                   '—Ä–∞—Å—Ç–∏ –∏ —è –±—É–¥—É –µ—â–µ –±–æ–ª–µ–µ –ø–æ–ª–µ–∑–µ–Ω.',
                                   reply_markup=kb_client)
        elif message.from_user.id == key and str(values).upper() not in id_saba:
            await bot.send_message(message.from_user.id,
                                   '–í—ã –µ—Å—Ç—å –≤ –±–∞–∑–µ, –Ω–æ –≤–∏–¥–∏–º–æ —É–∫–∞–∑–∞–Ω –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤ —É—á–µ–±–Ω–æ–º –ø–æ—Ä—Ç–∞–ª–µ, '
                                   '–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É',
                                   reply_markup=kb_ask)
            await bot.send_message(message.from_user.id, f'–£–∫–∞–∑–∞–Ω–Ω—ã–π –°–ê–ë–ê ID - {values}')
    if message.from_user.id not in test_dict:
        await FSMClient.saba_id.set()
        await bot.send_message(message.from_user.id, '–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!')
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ ID –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ –°–ê–ë–ê (learn@toyota)',
                            reply_markup=types.ReplyKeyboardRemove())


async def load_saba_id(message: types.Message, state: FSMContext):
    read = await sqlite_db.sql_read_users()
    test_dict = {}
    for ret in read:
        test_dict[ret[0]] = ret[1]
    if str(message.text) not in test_dict.values():
        await message.reply(message.text)
        async with state.proxy() as data:
            data['user_id'] = message.from_user.id
            data['saba_id'] = str(message.text).upper()
            if '_' in data['saba_id']:
                data['saba_id'] = data['saba_id'].replace('_', '#')
            data['Creation_time'] = datetime.now().date()
        await sqlite_db.sql_add_user_command(state)
        await state.finish()
        await message.reply(
            '–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –µ—â–µ —Ä–∞–∑ –≤–≤–µ—Å—Ç–∏ "/start" –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º')
    else:
        async with state.proxy() as data:
            data['user_id'] = message.from_user.id
            data['saba_id'] = None
            data['Creation_time'] = datetime.now().date()
        await sqlite_db.sql_add_user_command(state)
        await state.finish()
        await bot.send_message(message.from_user.id,
                               '—É–∫–∞–∑–∞–Ω–Ω—ã–π id —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—Ç—å –≤ –∞–∫–∞–¥–µ–º–∏—é', reply_markup=kb_ask)


"""*********************************–ë–õ–û–ö –ó–ê–î–ê–í–ê–ù–ò–Ø –í–û–ü–†–û–°–û–í****************************************************"""


async def cm_question_start(message: types.Message):
    await FSMQuestion.question.set()
    await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å', reply_markup=kb_cancel)


async def load_question(message: types.Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥':
        await state.finish()
        await message.reply('–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é', reply_markup=kb_client)
    else:
        async with state.proxy() as data:
            read = await sqlite_db.sql_read_users()
            for ret in read:
                if message.from_user.id == ret[0]:
                    data['user_id'] = ret[0]
                    data['first_name'] = ret[1]
                    data['last_name'] = ret[2]
                    data['job_title'] = ret[3]
                    data['dlr_for'] = ret[4]
                    data['question'] = message.text
                    data['question_status'] = "in process"
                    data['Creation_time'] = datetime.now().date()
        await sqlite_db.sql_add_questions(state)
        await state.finish()
        await message.reply('–°–ø–∞—Å–∏–±–æ –≤–∞–º –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ, —Å–∫–æ—Ä–æ –º—ã –≤–µ—Ä–Ω–µ–º—Å—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π!')


"""*********************************–ë–õ–û–ö –ó–ê–ü–ò–°–ò –ù–ê –¢–†–ï–ù–ò–ù–ì****************************************************"""


async def cm_training_request_start(message: types.Message):
    await FSMTrainingRequest.request.set()
    await bot.send_message(message.from_user.id,
                           '–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –§–ò–û —É—á–∞—Å—Ç–Ω–∏–∫–∞, –¥–∏–ª–µ—Ä—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä,'
                           '–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∞–Ω–≥–∞/–æ–≤ –∏ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞',
                           reply_markup=kb_cancel)


async def load_request(message: types.Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥':
        await state.finish()
        await message.reply('–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é', reply_markup=kb_client)
    else:
        async with state.proxy() as data:
            read = await sqlite_db.sql_read_users()
            for ret in read:
                if message.from_user.id == ret[0]:
                    data['user_id'] = ret[0]
                    data['first_name'] = ret[1]
                    data['last_name'] = ret[2]
                    data['job_title'] = ret[3]
                    data['dlr_for'] = ret[4]
                    data['request'] = "–ó–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏–Ω–≥ -" + message.text
                    data['question_status'] = "in process"
                    data['Creation_time'] = datetime.now().date()
        await sqlite_db.sql_add_questions(state)
        await state.finish()
        await message.reply('–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –°–∫–æ—Ä–æ –º—ã –≤–µ—Ä–Ω–µ–º—Å—è –∫ –≤–∞–º —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.')


"""*********************************–ë–õ–û–ö –ó–ê–ü–†–û–°–ê –ù–ê –ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–£ ID**********************************************"""


async def cm_id_correction(message: types.Message):
    await FSMReset.new_id.set()
    await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID',
                           reply_markup=types.ReplyKeyboardRemove())  # TODO –∑–∞–º–µ–Ω–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É


async def load_new_id(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        read = await sqlite_db.sql_read_users()
        for ret in read:
            if message.from_user.id == ret[0]:
                data['user_id'] = ret[0]
                data['first_name'] = ret[1]
                data['last_name'] = ret[2]
                data['job_title'] = ret[3]
                data['dlr_for'] = ret[4]
                data['question'] = "–ù–æ–≤—ã–π ID - " + message.text
                data['question_status'] = "in process"
                data['Creation_time'] = datetime.now().date()
    await sqlite_db.sql_add_questions(state)
    await state.finish()
    await message.reply('–°–ø–∞—Å–∏–±–æ –≤–∞–º –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ, —Å–∫–æ—Ä–æ –º—ã –≤–µ—Ä–Ω–µ–º—Å—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π!')


"""***************************************************************************************************************"""


# –ë–∞–∑–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
async def commands_start(message: types.Message):
    read = await sqlite_db.sql_read_users()
    test_dict = {}
    # changed_id =''
    for ret in read:
        # if "_" in ret[1]:
        #     changed_id = ret[1].replace ('_',"#")
        # test_dict[ret[0]] = changed_id
        test_dict[ret[0]] = ret[1]
    for key, values in test_dict.items():
        if message.from_user.id == key and str(values).upper() in id_saba:
            await bot.send_message(message.from_user.id, '–ü—Ä–æ–≤–µ—Ä–∫–∞ ID –Ω–æ–º–µ—Ä–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
            await bot.send_message(message.from_user.id,
                                   '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–∫–∞–¥–µ–º–∏—éüëã! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º –ø–æ–ª—É—á–∞—Ç—å '
                                   '–∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π '
                                   '–ê–∫–∞–¥–µ–º–∏–∏ –¢–æ–π–æ—Ç–∞ üì∞. –Ø –Ω–∞—Ö–æ–∂—É—Å—å –Ω–∞ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º —ç—Ç–∞–ø–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Å—å '
                                   '—ç–Ω—Ç—É–∑–∏–∞–∑–º–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∞–∫–∞–¥–µ–º–∏–∏. –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –º–æ—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç '
                                   '—Ä–∞—Å—Ç–∏ –∏ —è –±—É–¥—É –µ—â–µ –±–æ–ª–µ–µ –ø–æ–ª–µ–∑–µ–Ω.',
                                   reply_markup=kb_client)
            break
        elif message.from_user.id == key and str(values).upper() not in id_saba:
            await bot.send_message(message.from_user.id,
                                   '–í—ã –µ—Å—Ç—å –≤ –±–∞–∑–µ, –Ω–æ –≤–∏–¥–∏–º–æ —É–∫–∞–∑–∞–Ω –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤ —É—á–µ–±–Ω–æ–º –ø–æ—Ä—Ç–∞–ª–µ, '
                                   '–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É',
                                   reply_markup=kb_ask)
            await bot.send_message(message.from_user.id, f'–£–∫–∞–∑–∞–Ω–Ω—ã–π –≤–∞–º–∏ –°–ê–ë–ê ID - {values}')
            break
    if message.from_user.id not in test_dict:
        await bot.send_message(message.from_user.id,
                               '–í–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É',
                               reply_markup=registration_kb)
    # await bot.send_message(message.from_user.id, '–í–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ',
    # '—Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É', reply_markup=registration_kb)        #–≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —é–∑–µ—Ä–∞ –≤ –±–∞–∑–µ
    await message.delete()


# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
async def contacts(message: types.Message):
    read = await sqlite_db.sql_read_users()
    test_dict = {}
    for ret in read:
        test_dict[ret[0]] = ret[1]
    for key, values in test_dict.items():
        if message.from_user.id == key and values in id_saba:
            await bot.send_message(message.from_user.id,
                                   '<b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b>\n<i>–°–µ—Ä–≥–µ–π –¢–∏—à–∫–∞—Ä—å</i>: 8-916-351-72-03\n\n<b>–ù–µ '
                                   '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ:</b>\n<i>–í–ª–∞–¥–∏–º–∏—Ä –ö—Ä–∞–º—Å–∏–Ω</i>: '
                                   '8-916-532-08-75\n\n<b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ:</b>\n<i>–°–µ—Ä–≥–µ–π –õ–∞—Ç–∞—Ö–∏–Ω</i>: '
                                   '8-985-768-49-37\n\n<b>–û–±—É—á–µ–Ω–∏–µ –∞–≤—Ç–æ —Å –ø—Ä–æ–±–µ–≥–æ–º:</b>\n<i>–ê–ª–µ–∫—Å–∞–Ω–¥—Ä '
                                   '–†–æ–¥–∏–æ–Ω–æ–≤</i>: 8-926-012-22-23', parse_mode='html')


# –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–∞–π–¥–∞
async def guide(message: types.Message):
    read = await sqlite_db.sql_read_users()
    test_dict = {}
    for ret in read:
        test_dict[ret[0]] = ret[1]
    for key, values in test_dict.items():
        if message.from_user.id == key and values in id_saba:
            await message.answer_document(open('guide.pdf', 'rb'))


# –ù–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–≤–æ–¥–∏—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ, —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã
async def empty(message: types.Message):
    await bot.send_message(message.from_user.id, '–ù–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã')
    await message.delete()


"""*********************************–û–ü–ò–°–ê–ù–ò–ï –¢–†–ï–ù–ò–ù–ì–û–í****************************************************"""


async def menu_trainings(message: types.Message):
    read = await sqlite_db.sql_read_users()
    test_dict = {}
    for ret in read:
        test_dict[ret[0]] = ret[1]
    for key, values in test_dict.items():
        if message.from_user.id == key and values in id_saba:
            await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:', reply_markup=trainings_kb)


async def tech_trainings(message: types.Message):
    read = await sqlite_db.sql_read_users()
    test_dict = {}
    for ret in read:
        test_dict[ret[0]] = ret[1]
    for key, values in test_dict.items():
        if message.from_user.id == key and values in id_saba:
            await sqlite_db.sql_read_tech_trainings(message)
            await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:', reply_markup=trainings_kb)


async def non_tech_trainings(message: types.Message):
    read = await sqlite_db.sql_read_users()
    test_dict = {}
    for ret in read:
        test_dict[ret[0]] = ret[1]
    for key, values in test_dict.items():
        if message.from_user.id == key and values in id_saba:
            await sqlite_db.sql_read_non_tech_trainings(message)
            await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:', reply_markup=trainings_kb)


async def ucar_trainings(message: types.Message):
    read = await sqlite_db.sql_read_users()
    test_dict = {}
    for ret in read:
        test_dict[ret[0]] = ret[1]
    for key, values in test_dict.items():
        if message.from_user.id == key and values in id_saba:
            await sqlite_db.sql_read_ucar_trainings(message)
            await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:', reply_markup=trainings_kb)


async def training_description(message: types.Message):
    read = await sqlite_db.sql_read_users()
    test_dict = {}
    for ret in read:
        test_dict[ret[0]] = ret[1]
    for key, values in test_dict.items():
        if message.from_user.id == key and values in id_saba:
            await message.answer_document(open('trainings_description.pdf', 'rb'))


async def back_to_main_menu(message: types.Message):
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:', reply_markup=kb_client)


"""*********************************–û–ü–ò–°–ê–ù–ò–ï –¢–†–ï–ù–ò–ù–ì–û–í****************************************************"""


async def training_plan(message: types.Message):
    read = await sqlite_db.sql_read_users()
    test_dict = {}
    for ret in read:
        test_dict[ret[0]] = ret[1]
    for key, values in test_dict.items():
        if message.from_user.id == key and values in id_saba:
            await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:', reply_markup=schedule_kb)


async def tech_schedule(message: types.Message):
    read = await sqlite_db.sql_read_users()
    test_dict = {}
    for ret in read:
        test_dict[ret[0]] = ret[1]
    for key, values in test_dict.items():
        if message.from_user.id == key and values in id_saba:
            await sqlite_db.sql_read_tech_schedule(message)
            await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:', reply_markup=schedule_kb)


async def non_tech_schedule(message: types.Message):
    read = await sqlite_db.sql_read_users()
    test_dict = {}
    for ret in read:
        test_dict[ret[0]] = ret[1]
    for key, values in test_dict.items():
        if message.from_user.id == key and values in id_saba:
            await sqlite_db.sql_read_non_tech_schedule(message)
            await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:', reply_markup=schedule_kb)


async def ucar_schedule(message: types.Message):
    read = await sqlite_db.sql_read_users()
    test_dict = {}
    for ret in read:
        test_dict[ret[0]] = ret[1]
    for key, values in test_dict.items():
        if message.from_user.id == key and values in id_saba:
            await sqlite_db.sql_read_ucar_schedule(message)
            await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:', reply_markup=schedule_kb)


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(commands_start, commands=['start', 'help'])
    dp.register_message_handler(client_start, commands=['–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'], state=None)
    dp.register_message_handler(load_saba_id, state=FSMClient.saba_id)
    dp.register_message_handler(training_plan, lambda message: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏–Ω–≥–æ–≤' in message.text)
    dp.register_message_handler(cm_question_start, lambda message: '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ê–∫–∞–¥–µ–º–∏–∏' in message.text)
    dp.register_message_handler(load_question, state=FSMQuestion.question)
    dp.register_message_handler(contacts, lambda message: '–ö–æ–Ω—Ç–∞–∫—Ç—ã' in message.text)
    dp.register_message_handler(menu_trainings, lambda message: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏–Ω–≥–æ–≤' in message.text)
    dp.register_message_handler(guide, lambda message: '–ü–∞–º—è—Ç–∫–∞ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç—Ä–µ–Ω–∏–Ω–≥–µ' in message.text)
    dp.register_message_handler(tech_trainings, lambda message: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–Ω–∏–Ω–≥–∏' in message.text)
    dp.register_message_handler(non_tech_trainings, lambda message: '–ù–µ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–Ω–∏–Ω–≥–∏' in message.text)
    dp.register_message_handler(ucar_trainings, lambda message: '–¢—Ä–µ–Ω–∏–Ω–≥–∏ –∞–≤—Ç–æ —Å –ø—Ä–æ–±–µ–≥–æ–º' in message.text)
    dp.register_message_handler(back_to_main_menu, lambda message: '–ù–∞–∑–∞–¥' in message.text)
    dp.register_message_handler(training_description, lambda message: '–°–∫–∞—á–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–µ–Ω–∏–Ω–≥–æ–≤' in message.text)
    dp.register_message_handler(cm_training_request_start,
                                lambda message: '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–ª–∞—Ç–Ω—ã–π —Ç—Ä–µ–Ω–∏–Ω–≥' in message.text)
    dp.register_message_handler(load_request, state=FSMTrainingRequest.request)
    dp.register_message_handler(cm_id_correction, lambda message: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –ê–∫–∞–¥–µ–º–∏—é' in message.text)
    dp.register_message_handler(load_new_id, state=FSMReset.new_id)
    dp.register_message_handler(tech_schedule, lambda message: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' in message.text)
    dp.register_message_handler(non_tech_schedule, lambda message: '–ù–µ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' in message.text)
    dp.register_message_handler(ucar_schedule, lambda message: '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ —Å –ø—Ä–æ–±–µ–≥–æ–º' in message.text)
    dp.register_message_handler(empty)
